
/**
* This class represents complex numbers, and defines methods for performing
* arithmetic on complex numbers.
*/
public class SparseMatrix {
	// These are the instance variables. Each ComplexNumber object holds
	// two double values, known as x and y. They are private, so they are
	// not accessible from outside this class. Instead, they are available
	// through the real() and imaginary() methods below.
		public double[][] sparseMatrix;
	 	public double[][] columnIndexMatrix;
	
	/** This is the constructor. It initializes a sparse matrix having two  */
	public SparseMatrix(double[][] matrix)
	{
		int size = matrix.length;
		int noOfQubits=0;
		while(size>1)
		{
			size/=2;
			noOfQubits++;
		}
		size = matrix.length;
		// sparsing begins with the realisation that rows have equal numbers of
		// non-zero elements. Therefore to calculate the size of the sparse
		// matrix is enough to calculate the number of non-zero elements
		// in the first row.
		int sparseSize=0;
		for(int j=0 ; j < size ; j++)
		{

			if(Math.sqrt(matrix[0][j]*matrix[0][j])>0.1) // >0.1 to avoid issues related to double approximations
			{
				sparseSize++;
			}
		}

	 	this.sparseMatrix = new double[size][sparseSize];
	 	this.columnIndexMatrix = new double[size][sparseSize];

		for(int i=0 ; i < size ; i++)
		{
			int l=0;
			for(int j=0 ; j < size ; j++)
			{				
				if(Math.sqrt(matrix[0][j]*matrix[0][j])>0.1) // >0.1 to avoid issues related to double approximations
				{
					this.sparseMatrix[i][l]=matrix[i][j];
					this.columnIndexMatrix[i][l]=j;
					if(l<sparseSize)l++;
								System.out.println(this.sparseMatrix[i][l]);

				}
				
			}
		}
		
	}

}

