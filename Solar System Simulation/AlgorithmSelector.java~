/**
* Class contains no objects but encloses the method
* which selects which algorithm to implement based on the choice of the person.
*
* The algoritms included are: Euler, Euler-Cramer, Verlet and Euler-Richardson.
**/
public class AlgorithmSelector
{
	/** 
	* Method uses switch operator to select the chosen method
	* @param choice  the choice in accord to which an algorithm will be chosen
	* @param timeStep the time step chosen by the person
	* @param interval the period of measurements
	* @param solarSystem the array of celestial bodies
	* @param gravField the array of gravitational accelerations
	**/
	public static void select(int choice,
		double timeStep,
		double interval,
		Particle[] solarSystem,
		Particle.GravField gravField[]
		)
	{
		//loops over the method until the period is over
		for(double i=0; i < interval; i+=timeStep)
		{
			//Reset the gravitational acceleration so we can calculate it for the new position;
			for(int k=0; k < solarSystem.length; k++)
			{
				gravField[k].resetAcceleration();
			}
			
			//Calculates and stores the acceleration on each planet due to all other planets,
			//at the new position, before it is passed onto the methods.
			for(int k=0; k < solarSystem.length; k++)
			{
				for(int j=0; j < solarSystem.length; j++)
				{
					if(j!=k)
					{
						gravField[k].gravAcceleration(solarSystem[j]);
						
					}
				}
			}
			switch(choice)
			{
			case 1:
				//uses Euler's formulae to calculate the new position of each particle
				for(int k=0; k < solarSystem.length; k++)
				{
					solarSystem[k].applyEuler(timeStep, gravField[k].returnAcceleration());	
				} 
			case 2:
				//uses Euler Cramer formulae to calculate the new position of each particle
				for(int k=0; k < solarSystem.length; k++)
				{
					solarSystem[k].applyEulerCramer(timeStep, gravField[k].returnAcceleration());	
				} break;
			case 3:
				//uses Verlat's formulae to calculate the new position of each particle				
				for(int k=0; k < solarSystem.length; k++)
				{
					solarSystem[k].applyVerlat(timeStep, gravField[k].returnAcceleration(), k, solarSystem, gravField);	
				} break;
			case 4:
				//uses Verlat's formulae to calculate the new position of each particle
				for(int k=0; k < solarSystem.length; k++)
				{
					solarSystem[k].applyEulerRichardson(timeStep, gravField[k].returnAcceleration(), k, solarSystem, gravField);	
				} break;
			}
		}
	}
}